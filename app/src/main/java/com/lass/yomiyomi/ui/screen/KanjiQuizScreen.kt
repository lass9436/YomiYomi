package com.lass.yomiyomi.ui.screen

import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.unit.dp
import androidx.hilt.navigation.compose.hiltViewModel
import com.lass.yomiyomi.data.model.Level
import com.lass.yomiyomi.domain.model.KanjiQuizType
import com.lass.yomiyomi.speech.SpeechManager
import com.lass.yomiyomi.ui.component.speech.TextToSpeechButton
import com.lass.yomiyomi.ui.layout.QuizLayout
import com.lass.yomiyomi.ui.state.QuizState
import com.lass.yomiyomi.ui.state.QuizCallbacks
import com.lass.yomiyomi.viewmodel.kanjiQuiz.DummyKanjiQuizViewModel
import com.lass.yomiyomi.viewmodel.kanjiQuiz.KanjiQuizViewModel
import com.lass.yomiyomi.viewmodel.kanjiQuiz.KanjiQuizViewModelInterface

@Composable
fun KanjiQuizScreen(
    onBack: () -> Unit,
    kanjiQuizViewModel: KanjiQuizViewModelInterface = hiltViewModel<KanjiQuizViewModel>()
) {
    val context = LocalContext.current
    
    // Îã®ÏàúÌïú TTSÎßå ÏÇ¨Ïö©
    val speechManager = remember {
        SpeechManager(context)
    }
    
    val quizState = kanjiQuizViewModel.quizState.collectAsState()
    val isLoading = kanjiQuizViewModel.isLoading.collectAsState()
    var answerResult by remember { mutableStateOf<String?>(null) }
    var showDialog by remember { mutableStateOf(false) }
    var levelSelected by remember { mutableStateOf(Level.ALL) }
    var quizTypeSelected by remember { mutableStateOf(KanjiQuizType.KANJI_TO_READING_MEANING) }
    var isLearningMode by remember { mutableStateOf(false) }

    // TTS ÏÉÅÌÉúÎßå ÏÇ¨Ïö©
    val isSpeaking by speechManager.isSpeaking.collectAsState()

    LaunchedEffect(levelSelected, quizTypeSelected, isLearningMode) {
        kanjiQuizViewModel.loadQuizByLevel(levelSelected, quizTypeSelected, isLearningMode)
    }

    val quizTypes = listOf("ÌïúÏûê‚ÜíÏùΩÍ∏∞", "ÏùΩÍ∏∞‚ÜíÌïúÏûê")
    val selectedQuizTypeIndex = if (quizTypeSelected == KanjiQuizType.KANJI_TO_READING_MEANING) 0 else 1

    val state = QuizState(
        selectedLevel = levelSelected,
        quizTypes = quizTypes,
        selectedQuizTypeIndex = selectedQuizTypeIndex,
        isLearningMode = isLearningMode,
        isLoading = isLoading.value,
        question = quizState.value?.question,
        options = quizState.value?.options ?: emptyList(),
        showDialog = showDialog,
        answerResult = answerResult,
        searchUrl = "https://ja.dict.naver.com/#/search?range=kanji&query="
    )

    val callbacks = QuizCallbacks(
        onLevelSelected = { levelSelected = it },
        onQuizTypeSelected = { index ->
            quizTypeSelected = if (index == 0) {
                KanjiQuizType.KANJI_TO_READING_MEANING
            } else {
                KanjiQuizType.READING_MEANING_TO_KANJI
            }
        },
        onLearningModeChanged = { isLearningMode = it },
        onOptionSelected = { index ->
            val isCorrect = index == quizState.value?.correctIndex
            if (isCorrect) {
                answerResult = "Ï†ïÎãµÏûÖÎãàÎã§! üéâ"
            } else {
                val correct = quizState.value!!
                answerResult = "Ïò§ÎãµÏûÖÎãàÎã§! üòÖ\nÏ†ïÎãµ: ${correct.answer}"
            }
            showDialog = true
            kanjiQuizViewModel.checkAnswer(
                if (isCorrect) quizState.value!!.correctIndex else -1,
                isLearningMode
            )
        },
        onRefresh = {
            kanjiQuizViewModel.loadQuizByLevel(levelSelected, quizTypeSelected, isLearningMode)
        },
        onDismissDialog = {
            showDialog = false
            answerResult = null
            kanjiQuizViewModel.loadQuizByLevel(levelSelected, quizTypeSelected, isLearningMode)
        }
    )

    QuizLayout(
        title = "ÌïúÏûê ÌÄ¥Ï¶à üéå",
        state = state,
        callbacks = callbacks,
        onBack = onBack,
        extraContent = {
            // Í∞ÑÎã®Ìïú TTS Î≤ÑÌäºÎßå Ï∂îÍ∞Ä
            quizState.value?.question?.let { question ->
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(16.dp),
                    horizontalArrangement = Arrangement.Center,
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    TextToSpeechButton(
                        text = question,
                        isSpeaking = isSpeaking,
                        onSpeak = { speechManager.speak(it) },
                        onStop = { speechManager.stopSpeaking() },
                        size = 40.dp
                    )
                    Spacer(modifier = Modifier.width(8.dp))
                    Text(
                        text = "Î∞úÏùå Îì£Í∏∞",
                        style = MaterialTheme.typography.bodyMedium
                    )
                }
            }
        }
    )
}

@Composable
fun KanjiQuizScreenPreview() {
    KanjiQuizScreen(
        onBack = {},
        kanjiQuizViewModel = DummyKanjiQuizViewModel()
    )
}