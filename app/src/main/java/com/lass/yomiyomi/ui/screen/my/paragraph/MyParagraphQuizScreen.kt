package com.lass.yomiyomi.ui.screen.my.paragraph

import androidx.activity.compose.BackHandler
import androidx.compose.foundation.layout.*
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.hilt.navigation.compose.hiltViewModel
import com.lass.yomiyomi.ui.component.card.ItemCard
import com.lass.yomiyomi.ui.component.button.LevelSelector
import com.lass.yomiyomi.viewmodel.myParagraph.quiz.DummyMyParagraphQuizViewModel
import com.lass.yomiyomi.viewmodel.myParagraph.quiz.MyParagraphQuizViewModel
import com.lass.yomiyomi.viewmodel.myParagraph.quiz.MyParagraphQuizViewModelInterface

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun MyParagraphQuizScreen(
    onBack: () -> Unit,
    myParagraphQuizViewModel: MyParagraphQuizViewModelInterface = hiltViewModel<MyParagraphQuizViewModel>()
) {
    // Î∞±Ìï∏Îì§Îü¨ Îì±Î°ù
    BackHandler {
        onBack()
    }

    // ViewModel state ÏàòÏßë
    val isLoading by myParagraphQuizViewModel.isLoading.collectAsState()
    val selectedLevel by myParagraphQuizViewModel.selectedLevel.collectAsState()
    val quizState by myParagraphQuizViewModel.quizState.collectAsState()
    val availableLevels by myParagraphQuizViewModel.availableLevels.collectAsState()

    Scaffold(
        topBar = {
            TopAppBar(
                title = {
                    Text(
                        "ÎÇ¥ Î¨∏Îã® ÌÄ¥Ï¶à",
                        color = MaterialTheme.colorScheme.tertiary,
                        fontWeight = FontWeight.Bold
                    )
                },
                navigationIcon = {
                    IconButton(onClick = {
                        if (quizState.currentParagraph != null && !quizState.isQuizFinished) {
                            myParagraphQuizViewModel.resetQuiz()
                        } else {
                            onBack()
                        }
                    }) {
                        Icon(
                            imageVector = Icons.AutoMirrored.Filled.ArrowBack,
                            contentDescription = "Îí§Î°úÍ∞ÄÍ∏∞",
                            tint = MaterialTheme.colorScheme.tertiary
                        )
                    }
                },
                colors = TopAppBarDefaults.topAppBarColors(
                    containerColor = MaterialTheme.colorScheme.background
                )
            )
        }
    ) { innerPadding ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(innerPadding)
                .padding(16.dp)
        ) {
            if (quizState.currentParagraph == null && !quizState.isQuizFinished) {
                // ÌÄ¥Ï¶à ÏãúÏûë Ï†Ñ: Î†àÎ≤® ÏÑ†ÌÉù UI
                LevelSelector(
                    selectedLevel = selectedLevel,
                    onLevelSelected = { myParagraphQuizViewModel.setSelectedLevel(it) },
                    availableLevels = availableLevels
                )
                
                Spacer(modifier = Modifier.height(32.dp))
                
                Card(
                    modifier = Modifier.fillMaxWidth(),
                    colors = CardDefaults.cardColors(
                        containerColor = MaterialTheme.colorScheme.primaryContainer
                    )
                ) {
                    Column(
                        modifier = Modifier.padding(24.dp),
                        horizontalAlignment = Alignment.CenterHorizontally
                    ) {
                        Text(
                            text = "Î¨∏Îã® ÌÄ¥Ï¶à ÏãúÏûëÌïòÍ∏∞",
                            style = MaterialTheme.typography.headlineSmall,
                            fontWeight = FontWeight.Bold,
                            textAlign = TextAlign.Center
                        )
                        
                        Spacer(modifier = Modifier.height(16.dp))
                        
                        Text(
                            text = "ÏÑ†ÌÉùÌïú Î†àÎ≤®: ${selectedLevel.value ?: "Ï†ÑÏ≤¥"}",
                            style = MaterialTheme.typography.bodyLarge,
                            textAlign = TextAlign.Center
                        )
                        
                        Spacer(modifier = Modifier.height(24.dp))
                        
                        Button(
                            onClick = { myParagraphQuizViewModel.startQuiz() },
                            modifier = Modifier.fillMaxWidth()
                        ) {
                            Text("ÌÄ¥Ï¶à ÏãúÏûë", style = MaterialTheme.typography.titleMedium)
                        }
                    }
                }
            } else {
                // ÌÄ¥Ï¶à ÏßÑÌñâ ÏÉÅÌÉú ÌëúÏãú
                if (quizState.currentParagraph != null || quizState.isQuizFinished) {
                    Card(
                        modifier = Modifier.fillMaxWidth(),
                        colors = CardDefaults.cardColors(
                            containerColor = MaterialTheme.colorScheme.surfaceVariant
                        )
                    ) {
                        Row(
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(16.dp),
                            horizontalArrangement = Arrangement.SpaceBetween,
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            Text(
                                text = "Î¨∏Îã® ${quizState.currentParagraphIndex + 1}/${quizState.totalParagraphs}",
                                style = MaterialTheme.typography.titleMedium,
                                fontWeight = FontWeight.Bold
                            )
                            
                            Text(
                                text = "Ï†êÏàò: ${quizState.score}",
                                style = MaterialTheme.typography.titleMedium,
                                fontWeight = FontWeight.Bold,
                                color = MaterialTheme.colorScheme.primary
                            )
                        }
                        
                        // ÏßÑÌñâ Î∞î
                        LinearProgressIndicator(
                            progress = { if (quizState.totalParagraphs > 0) (quizState.currentParagraphIndex + 1).toFloat() / quizState.totalParagraphs else 0f },
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(horizontal = 16.dp, vertical = 8.dp),
                        )
                    }
                    
                    Spacer(modifier = Modifier.height(16.dp))
                }

                // ÌÄ¥Ï¶à ÏΩòÌÖêÏ∏† ÏòÅÏó≠
                Box(
                    modifier = Modifier
                        .fillMaxWidth()
                        .weight(1f),
                    contentAlignment = Alignment.Center
                ) {
                    when {
                        isLoading -> {
                            CircularProgressIndicator(modifier = Modifier.size(48.dp))
                        }
                        quizState.isQuizFinished -> {
                            // ÌÄ¥Ï¶à ÏôÑÎ£å ÌôîÎ©¥
                            Card(
                                modifier = Modifier.fillMaxWidth(),
                                colors = CardDefaults.cardColors(
                                    containerColor = MaterialTheme.colorScheme.primaryContainer
                                )
                            ) {
                                Column(
                                    modifier = Modifier.padding(24.dp),
                                    horizontalAlignment = Alignment.CenterHorizontally
                                ) {
                                    Text(
                                        text = "Î¨∏Îã® ÌÄ¥Ï¶à ÏôÑÎ£å! üéâ",
                                        style = MaterialTheme.typography.headlineMedium,
                                        fontWeight = FontWeight.Bold,
                                        textAlign = TextAlign.Center
                                    )
                                    
                                    Spacer(modifier = Modifier.height(16.dp))
                                    
                                    Text(
                                        text = "Ï¥ù Ï†êÏàò: ${quizState.score}Ï†ê",
                                        style = MaterialTheme.typography.titleLarge,
                                        fontWeight = FontWeight.Bold,
                                        color = MaterialTheme.colorScheme.primary,
                                        textAlign = TextAlign.Center
                                    )
                                    
                                    Spacer(modifier = Modifier.height(8.dp))
                                    
                                    Text(
                                        text = "ÏôÑÎ£åÌïú Î¨∏Îã®: ${quizState.totalParagraphs}Í∞ú",
                                        style = MaterialTheme.typography.titleMedium,
                                        textAlign = TextAlign.Center
                                    )
                                    
                                    Spacer(modifier = Modifier.height(24.dp))
                                    
                                    Row(
                                        modifier = Modifier.fillMaxWidth(),
                                        horizontalArrangement = Arrangement.spacedBy(16.dp)
                                    ) {
                                        OutlinedButton(
                                            onClick = { myParagraphQuizViewModel.resetQuiz() },
                                            modifier = Modifier.weight(1f)
                                        ) {
                                            Text("Îã§Ïãú ÏãúÏûë")
                                        }
                                        
                                        Button(
                                            onClick = onBack,
                                            modifier = Modifier.weight(1f)
                                        ) {
                                            Text("ÏôÑÎ£å")
                                        }
                                    }
                                }
                            }
                        }
                        quizState.currentParagraph != null -> {
                            // ÌÄ¥Ï¶à ÏßÑÌñâ Ï§ë
                            Column(
                                modifier = Modifier.fillMaxWidth(),
                                horizontalAlignment = Alignment.CenterHorizontally
                            ) {
                                // Î¨∏Îã® Ï†ïÎ≥¥
                                Card(
                                    modifier = Modifier.fillMaxWidth(),
                                    colors = CardDefaults.cardColors(
                                        containerColor = MaterialTheme.colorScheme.surfaceVariant
                                    )
                                ) {
                                    Column(
                                        modifier = Modifier.padding(16.dp)
                                    ) {
                                        Text(
                                            text = "Î¨∏Îã® ${quizState.currentParagraphIndex + 1}/${quizState.totalParagraphs}",
                                            style = MaterialTheme.typography.titleMedium,
                                            fontWeight = FontWeight.Bold
                                        )
                                        Text(
                                            text = quizState.currentParagraph!!.title,
                                            style = MaterialTheme.typography.titleLarge,
                                            fontWeight = FontWeight.Bold,
                                            modifier = Modifier.padding(vertical = 4.dp)
                                        )
                                        Text(
                                            text = quizState.currentParagraph!!.description,
                                            style = MaterialTheme.typography.bodyMedium
                                        )
                                    }
                                }
                                
                                Spacer(modifier = Modifier.height(16.dp))
                                
                                val currentSentence = myParagraphQuizViewModel.getCurrentSentence()
                                if (currentSentence != null) {
                                    // ÌòÑÏû¨ Î¨∏Ïû• ÌëúÏãú
                                    Text(
                                        text = "Î¨∏Ïû• ${quizState.currentSentenceIndex + 1}/${quizState.currentSentences.size}",
                                        style = MaterialTheme.typography.titleSmall,
                                        modifier = Modifier.padding(bottom = 8.dp)
                                    )
                                    
                                    ItemCard(item = currentSentence)
                                    
                                    Spacer(modifier = Modifier.height(24.dp))
                                    
                                    if (!quizState.showAnswer) {
                                        // ÎãµÏïà Î≥¥Í∏∞ Î≤ÑÌäº
                                        Text(
                                            text = "ÏùºÎ≥∏Ïñ¥Î•º ÌïúÍµ≠Ïñ¥Î°ú Î≤àÏó≠Ìï¥Î≥¥ÏÑ∏Ïöî!",
                                            style = MaterialTheme.typography.titleMedium,
                                            textAlign = TextAlign.Center,
                                            modifier = Modifier.padding(bottom = 16.dp)
                                        )
                                        
                                        Button(
                                            onClick = { myParagraphQuizViewModel.showAnswer() },
                                            modifier = Modifier.fillMaxWidth()
                                        ) {
                                            Text("Ï†ïÎãµ ÌôïÏù∏", style = MaterialTheme.typography.titleMedium)
                                        }
                                    } else {
                                        // Ï†ïÎãµ ÌëúÏãú Î∞è ÌèâÍ∞Ä Î≤ÑÌäºÎì§
                                        Card(
                                            modifier = Modifier.fillMaxWidth(),
                                            colors = CardDefaults.cardColors(
                                                containerColor = MaterialTheme.colorScheme.secondaryContainer
                                            )
                                        ) {
                                            Column(
                                                modifier = Modifier.padding(16.dp),
                                                horizontalAlignment = Alignment.CenterHorizontally
                                            ) {
                                                Text(
                                                    text = "Ï†ïÎãµ",
                                                    style = MaterialTheme.typography.titleMedium,
                                                    fontWeight = FontWeight.Bold
                                                )
                                                
                                                Text(
                                                    text = currentSentence.korean,
                                                    style = MaterialTheme.typography.titleLarge,
                                                    textAlign = TextAlign.Center,
                                                    modifier = Modifier.padding(vertical = 8.dp)
                                                )
                                            }
                                        }
                                        
                                        Spacer(modifier = Modifier.height(16.dp))
                                        
                                        if (!quizState.isAnswered) {
                                            Text(
                                                text = "ÎßûÌòîÎÇòÏöî?",
                                                style = MaterialTheme.typography.titleMedium,
                                                textAlign = TextAlign.Center,
                                                modifier = Modifier.padding(bottom = 16.dp)
                                            )
                                            
                                            Row(
                                                modifier = Modifier.fillMaxWidth(),
                                                horizontalArrangement = Arrangement.spacedBy(16.dp)
                                            ) {
                                                Button(
                                                    onClick = { myParagraphQuizViewModel.answerCorrect() },
                                                    modifier = Modifier.weight(1f),
                                                    colors = ButtonDefaults.buttonColors(
                                                        containerColor = MaterialTheme.colorScheme.primary
                                                    )
                                                ) {
                                                    Text("ÎßûÏùå ‚úì")
                                                }
                                                
                                                OutlinedButton(
                                                    onClick = { myParagraphQuizViewModel.answerIncorrect() },
                                                    modifier = Modifier.weight(1f)
                                                ) {
                                                    Text("ÌãÄÎ¶º ‚úó")
                                                }
                                            }
                                        } else {
                                            val isLastSentence = quizState.currentSentenceIndex + 1 >= quizState.currentSentences.size
                                            val isLastParagraph = quizState.currentParagraphIndex + 1 >= quizState.totalParagraphs
                                            
                                            Button(
                                                onClick = { myParagraphQuizViewModel.nextQuestion() },
                                                modifier = Modifier.fillMaxWidth()
                                            ) {
                                                Text(
                                                    when {
                                                        isLastSentence && isLastParagraph -> "ÌÄ¥Ï¶à ÏôÑÎ£å"
                                                        isLastSentence -> "Îã§Ïùå Î¨∏Îã®"
                                                        else -> "Îã§Ïùå Î¨∏Ïû•"
                                                    },
                                                    style = MaterialTheme.typography.titleMedium
                                                )
                                            }
                                        }
                                    }
                                } else {
                                    Text(
                                        text = "Ïù¥ Î¨∏Îã®ÏóêÎäî Î¨∏Ïû•Ïù¥ ÏóÜÏäµÎãàÎã§.",
                                        textAlign = TextAlign.Center,
                                        style = MaterialTheme.typography.bodyLarge
                                    )
                                    
                                    Spacer(modifier = Modifier.height(16.dp))
                                    
                                    Button(
                                        onClick = { myParagraphQuizViewModel.nextQuestion() },
                                        modifier = Modifier.fillMaxWidth()
                                    ) {
                                        Text("Îã§Ïùå Î¨∏Îã®ÏúºÎ°ú")
                                    }
                                }
                            }
                        }
                        else -> {
                            Text(
                                text = "ÌÄ¥Ï¶àÎ•º ÏãúÏûëÌïòÎ†§Î©¥ ÏúÑÏùò 'ÌÄ¥Ï¶à ÏãúÏûë' Î≤ÑÌäºÏùÑ ÎàåÎü¨Ï£ºÏÑ∏Ïöî!",
                                textAlign = TextAlign.Center,
                                style = MaterialTheme.typography.bodyLarge
                            )
                        }
                    }
                }
            }
        }
    }
}

@Preview(showBackground = true)
@Composable
fun MyParagraphQuizScreenPreview() {
    MyParagraphQuizScreen(
        onBack = {},
        myParagraphQuizViewModel = DummyMyParagraphQuizViewModel()
    )
} 
